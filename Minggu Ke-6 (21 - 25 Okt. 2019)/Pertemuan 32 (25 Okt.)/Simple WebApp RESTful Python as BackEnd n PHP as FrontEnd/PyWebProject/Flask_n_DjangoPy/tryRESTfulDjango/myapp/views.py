from django.shortcuts import render
from django.http import HttpResponse
from django.views.decorators.csrf import csrf_exempt
import numpy as np

import json

from myapp.models import Car,myGA

def index(request):
    response = json.dumps([{'Info':'Masukkan task nilai-nilai parameter anda :D !'}])
    return HttpResponse(response, content_type='text/json')

def get_car(request, car_name):
    if request.method == 'GET':
        try:
            car = Car.objects.get(name=car_name)
            response = json.dumps([{ 'Car': car.name, 'Top Speed': car.top_speed}])
        except:
            response = json.dumps([{ 'Error': 'No car with that name'}])
    return HttpResponse(response, content_type='text/json')

@csrf_exempt
def add_car(request):
    if request.method == 'POST':
        print('request.body: ')
        print(request.body)
        print('str request.body: ')
        print(str(request.body))
        payload = json.loads(request.body)
        print('payload: ')
        print(payload)
        car_name = payload['car_name']
        print('car_name: ')
        print(car_name)
        top_speed = payload['top_speed']
        print('top_speed: ')
        print(top_speed)
        car = Car(name=car_name, top_speed=top_speed)
        print(car)
        try:
            car.save()
            response = json.dumps([{ 'Success': 'Car added successfully!'}])
        except:
            response = json.dumps([{ 'Error': 'Car could not be added!'}])
    return HttpResponse(response, content_type='text/json')

@csrf_exempt
def run_ga(request):

#
#asli: curl -d "{\"car_name\":\"Tesla Model S4\",\"top_speed\":55}" -H "Content-Type: application/json" -X POST http://localhost:8000/car
#'''
#hasil konversi utk koding PHP:
#// Generated by curl-to-PHP: http://incarnate.github.io/curl-to-php/
#$ch = curl_init();

#curl_setopt($ch, CURLOPT_URL, "http://localhost:8000/car");
#curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
#curl_setopt($ch, CURLOPT_POSTFIELDS, "{\"car_name\":\"Tesla Model S4\",\"top_speed\":55}");
#curl_setopt($ch, CURLOPT_POST, 1);

#$headers = array();
#$headers[] = "Content-Type: application/json";
#curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

#$result = curl_exec($ch);
#if (curl_errno($ch)) {
#    echo 'Error:' . curl_error($ch);
#}
#curl_close ($ch);


#'''
#




    if request.method == 'POST':
        param_ga = json.loads(request.body)
        #print('request.body: ')
        #print(request.body)
        #print('str request.body: ')
        #print(str(request.body))

        max_iter = param_ga['max_iter'] # get nilai parameter ke-1
        pop_size = param_ga['pop_size'] # get nilai parameter ke-2
        cr = param_ga['cr'] # get nilai parameter ke-3
        mr = param_ga['mr'] # get nilai parameter ke-4

        print(".")
        print("..")
        print("POST Awal dari Web PHP ke WebApp RESTful Api Python dgn Django:")
        print(request.body)

        print(".")
        print("Hasil Ekstrasi POST Awal dari Web PHP/ atau lainnya ke WebApp RESTful Api Python:")
        print(str(request.body))
        itermax = max_iter
        popsize = pop_size
        # itermax,popsize,cr,mr = myv.split(',')


        ## //Case : Max, y = f(x) = -x^2 + 14x – 13, 0 ≤ x ≤ 15
        Batas_Min = 0
        Batas_Max = 15

        #print('max_iter: ')
        #print(max_iter)
        #print('pop_size: ')
        #print(pop_size)
        #print('cr: ')
        #print(cr)
        #print('mr: ')
        #print(mr)

        ## //Cek panjang string dari nilai biner Batas_Max

        vfinal=""
        ## // get atau setting parameter 
        Pop_Size = int(popsize)
        cr_ = float(cr)
        mr_ = float(mr)
        HasilBiner = myGA.dec2bin(Batas_Max)
        StringLenChromosome = len(HasilBiner)
        print(".")
        print("..")
        print("====================================================================")
        print("Start Solving Case : Max, y = f(x) = -x^2 + 14x – 13, 0 ≤ x ≤ 15 :")
        print("====================================================================")
        print("Hasil Biner= "+HasilBiner)
        print("StringLen Chromosome= "+str(StringLenChromosome))

        vfinal=vfinal+".^"+"..^"+"=====================================================^" \
        + "Start Solving Case : Max, y = f(x) = -x*x + 14x - 13, 0 <= x <= 15 :^" \
        + "=====================================================^" \
        + "Hasil Biner= "+HasilBiner + "^StringLen Chromosome= "+str(StringLenChromosome)

        NilaiDec = myGA.bin2dec(HasilBiner)
        print("Hasil Biner2Dec ("+HasilBiner+")= "+str(NilaiDec))
        vfinal=vfinal+"^Hasil Biner2Dec ("+HasilBiner+")= "+str(NilaiDec)

        print("") 
        print("1. generate individu")
        ## 1. generate individu
        ## random code biner
        batasbawahrandd = 0
        batasatasrandd = 1        
        individu = myGA.myrandint(Pop_Size,StringLenChromosome,batasbawahrandd,batasatasrandd)

        ## random code real
        #BatasBawahRandD = 0.1
        #BatasAtasRandD = 0.9
        #individu = myGA.myrand(Pop_Size,StringLenChromosome,BatasBawahRandD,BatasAtasRandD); # atau dengan
        #individu = BatasBawahRandD+np.random.random([Pop_Size,StringLenChromosome])*(BatasAtasRandD-BatasBawahRandD)
        
        ## Menampilkan hasil generate individu        
        print("    Chromosome |    x   |  y=f(x)    ")
        print("================================================")
        vfinal=vfinal+"^^"+"    Chromosome |    x   |  y=f(x)    ^" \
            + "================================================^"

        # indek ii=[lowerloop,upperloop]
        lowerloop=0 # nilai awal untuk index ii
        upperloop=Pop_Size
        for ii in range(lowerloop, upperloop):
            tempind1 = ''.join(str(individu[ii])) # hasil seperti '[1 0 1 1]'
            # atau = ''.join(str(individu[ii,:])) # artinya baris ke-ii semua kolom

            tempind2 = ''.join(map(str,individu[ii])) # hasil seperti '1011'
            # atau = ''.join(map(str,individu[ii,:]))
            xtemp =myGA.bin2dec(tempind2)
            print('P'+str(ii+1)+': '+tempind1 + '  |   ' + str(xtemp) + '\t|  ' + str(myGA.MyFx(xtemp)))
            vfinal=vfinal+ "P"+str(ii+1)+": "+tempind1 + "  |   " + str(xtemp) + " &nbsp &nbsp|  " + str(myGA.MyFx(xtemp))+"^"
        
        
        print()
        print("2. Reproduksi (Crossover dan Mutasi)")
        ## // 2. Reproduksi
        # // start proses crossover
        print("2.1 Crossover")
        # // hitung jumlah offspring atau anak crossover
        byk_anak_crossover = int(np.ceil(cr_ * Pop_Size))
        print("Banyaknya offspring crossover= "+str(byk_anak_crossover))

        # // Proses crossover dilakukan sebanyak (n_crossover)
        n_crossover = int(np.ceil(float(byk_anak_crossover / 2))) # // dibagi 2, krn 1 kali proses crossover akan menghasilkan 2 anak
        print("Proses crossover dilakukan sebanyak = " + str(n_crossover))

        HasilCrossover = np.empty((byk_anak_crossover,StringLenChromosome))  # inisialisasi
        HasilCrossovercek = np.empty((byk_anak_crossover,StringLenChromosome))  # inisialisasi
        HasilCrossoverTemp = np.empty((2,StringLenChromosome))
        HasilCrossoverTempcek = np.empty((2,StringLenChromosome))
        HasilCrossover=HasilCrossover.astype(int)
        HasilCrossovercek=HasilCrossovercek.astype(int)

        loop_anak_crossover = 0
        # // membuat offspring crossover sebanyak byk_anak_crossover
        for i in range(0,n_crossover):
            # //menampung hasil OneCutPointCrossover
            HasilCrossoverTemp,HasilCrossoverTempcek=myGA.OneCutPointCrossover(individu)
            HasilCrossover[loop_anak_crossover]=HasilCrossoverTemp[0]
            HasilCrossovercek[loop_anak_crossover]=HasilCrossoverTempcek[0]

            #print("Cek:")
            #print(HasilCrossoverTemp)
            #print(HasilCrossoverTempcek)
            #print(HasilCrossover)
            #print(HasilCrossovercek)
            loop_anak_crossover = loop_anak_crossover + 1

            if (loop_anak_crossover + 1) > byk_anak_crossover:
                break

            HasilCrossover[loop_anak_crossover]=HasilCrossoverTemp[1]
            HasilCrossovercek[loop_anak_crossover]=HasilCrossoverTempcek[1]

            loop_anak_crossover = loop_anak_crossover + 1

        # // menampilkan hasil crossover 
        print()
        print("Hasil Crossover cara 1:")
        vfinal=vfinal+"^"+"Hasil Crossover:^"
        for ii in range(0, byk_anak_crossover):
            tempind1 = ''.join(str(HasilCrossover[ii])) # hasil seperti '[1 0 1 1]'
            # atau = ''.join(str(HasilCrossover[ii,:])) # artinya baris ke-ii semua kolom

            tempind2 = ''.join(map(str,HasilCrossover[ii])) # hasil seperti '1011'
            # atau = ''.join(map(str,HasilCrossover[ii,:]))
            #print(tempind2)
            xtemp =myGA.bin2dec(tempind2)
            print('C'+str(ii+1)+': '+tempind1 + '  |   ' + str(xtemp) + '\t|  ' + str(myGA.MyFx(xtemp)))
            vfinal=vfinal+ "C"+str(ii+1)+": "+tempind1 + "  |   " + str(xtemp) + " &nbsp &nbsp|  " + str(myGA.MyFx(xtemp))+"^"

        #print("")
        #print("Hasil Crossover cara 2:")
        #for ii in range(0, byk_anak_crossover):
        #    tempind1 = ''.join(str(HasilCrossovercek[ii])) # hasil seperti '[1 0 1 1]'
        #    # atau = ''.join(str(HasilCrossovercek[ii,:])) # artinya baris ke-ii semua kolom

        #    tempind2 = ''.join(map(str,HasilCrossovercek[ii])) # hasil seperti '1011'
        #    # atau = ''.join(map(str,HasilCrossovercek[ii,:]))
        #    xtemp =myGA.bin2dec(tempind2)
        #    print('C'+str(ii+1)+': '+tempind1 + '  |   ' + str(xtemp) + '\t|  ' + str(myGA.MyFx(xtemp)))
        #    vfinal=vfinal+ "C"+str(ii+1)+": "+tempind1 + "  |   " + str(xtemp) + " &nbsp &nbsp|  " + str(myGA.MyFx(xtemp))+"^"
        
        print()
        # // start proses mutasi
        print("2.2 Mutasi")
        # // hitung jumlah offspring mutasi
        byk_anak_mutasi = int(np.ceil(mr_ * Pop_Size))
        print("Banyaknya offspring mutasi= "+str(byk_anak_mutasi))

        # // Proses mutasi dilakukan sebanyak (n_mutasi)
        n_mutasi = byk_anak_mutasi
        print("Proses mutasi dilakukan sebanyak = " + str(n_mutasi))

        HasilMutasi = np.empty((byk_anak_mutasi,StringLenChromosome))  # inisialisasi        
        HasilMutasiTemp = np.empty((1,StringLenChromosome))
        HasilMutasi=HasilMutasi.astype(int)

        # // membuat offspring mutasi sebanyak byk_anak_mutasi
        for i in range(0,n_mutasi):
            # //menampung hasil Random Mutasi
            HasilMutasiTemp=myGA.RandomMutasi(individu)
            #print(HasilMutasiTemp)
            if n_mutasi==1:
                HasilMutasi[i:]=HasilMutasiTemp
            else:
                HasilMutasi[i,:]=HasilMutasiTemp
            #print(HasilMutasi[i:])


        # // menampilkan hasil mutasi 
        print()
        print("Hasil Mutasi:")
        vfinal=vfinal+"^"+"Hasil Mutasi:^"
        for ii in range(0, byk_anak_mutasi):
            tempind1 = ''.join(str(HasilMutasi[ii])) # hasil seperti '[1 0 1 1]'
            # atau = ''.join(str(HasilMutasi[ii,:])) # artinya baris ke-ii semua kolom

            tempind2 = ''.join(map(str,HasilMutasi[ii])) # hasil seperti '1011'
            # atau = ''.join(map(str,HasilMutasi[ii,:]))
            #print(tempind2)
            xtemp =myGA.bin2dec(tempind2)
            print('M'+str(ii+1)+': '+tempind1 + '  |   ' + str(xtemp) + '\t|  ' + str(myGA.MyFx(xtemp)))
            vfinal=vfinal+ "M"+str(ii+1)+": "+tempind1 + "  |   " + str(xtemp) + " &nbsp &nbsp|  " + str(myGA.MyFx(xtemp))+"^"

        # // membuat penampungan populasi induk dan anak (crossover + mutasi)
        Pop_Size_induk_dan_anak = Pop_Size + byk_anak_crossover + byk_anak_mutasi
        IndividuGabungan = np.empty((Pop_Size_induk_dan_anak,StringLenChromosome))
        IndividuGabungan=IndividuGabungan.astype(int)
        IndividuGabunganSort = np.empty((Pop_Size_induk_dan_anak,StringLenChromosome))
        IndividuGabunganSort=IndividuGabunganSort.astype(int)
        fxIndividuGabungan = np.empty((Pop_Size_induk_dan_anak,1),float)
        

        IndividuGabungan[0:Pop_Size,:]=individu
        IndividuGabungan[Pop_Size:Pop_Size + byk_anak_crossover,:]=HasilCrossover
        IndividuGabungan[Pop_Size + byk_anak_crossover:Pop_Size_induk_dan_anak,:]=HasilMutasi

        # // menampilkan hasil individu gabungan
        #print(IndividuGabungan)
        print("")
        print("Hasil Populasi Gabungan induk dan anak (crossover + mutasi):")
        vfinal=vfinal+"^"+"Hasil Populasi Gabungan induk dan anak (crossover + mutasi):^"
        for ii in range(0, Pop_Size_induk_dan_anak):
            tempind1 = ''.join(str(IndividuGabungan[ii])) # hasil seperti '[1 0 1 1]'
            # atau = ''.join(str(IndividuGabungan[ii,:])) # artinya baris ke-ii semua kolom

            tempind2 = ''.join(map(str,IndividuGabungan[ii])) # hasil seperti '1011'
            # atau = ''.join(map(str,IndividuGabungan[ii,:]))
            xtemp = myGA.bin2dec(tempind2)
            fxIndividuGabungan[ii] = myGA.MyFx(xtemp)
            print('G'+str(ii+1)+': '+tempind1 + '  |   ' + str(xtemp) + '\t|  ' + ''.join(map(str,fxIndividuGabungan[ii])))
            vfinal=vfinal+ "G"+str(ii+1)+": "+tempind1 + "  |   " + str(xtemp) + " &nbsp &nbsp|  " + ''.join(map(str,fxIndividuGabungan[ii])) +"^"

        # // Seleksi IndividuGabungan berdasarkan nilai f(x)
        NextIndividu = np.empty((Pop_Size,StringLenChromosome))
        NextIndividu=NextIndividu.astype(int)

        indicesort=fxIndividuGabungan.ravel().argsort()
        for i in range(Pop_Size_induk_dan_anak-1, -1, -1): # [Pop_Size_induk_dan_anak-1, Pop_Size_induk_dan_anak-2,..,0]
            #print(str(i)+'   '+str(Pop_Size_induk_dan_anak-1-i))
            IndividuGabunganSort[i]=IndividuGabungan[indicesort[Pop_Size_induk_dan_anak-1-i]]
            #print(indicesort[i])


        individu = IndividuGabunganSort[0:Pop_Size,:]
        print("")
        vfinal=vfinal+"^"+"Hasil Seleksi untuk Next Generation ke->2:^"
        print("Hasil Seleksi untuk Next Generation ke->2:")
        for ii in range(0, Pop_Size):
            tempind1 = ''.join(str(individu[ii])) # hasil seperti '[1 0 1 1]'
            # atau = ''.join(str(individu[ii,:])) # artinya baris ke-ii semua kolom

            tempind2 = ''.join(map(str,individu[ii])) # hasil seperti '1011'
            # atau = ''.join(map(str,individu[ii,:]))
            xtemp = myGA.bin2dec(tempind2)            
            print('nextG'+str(ii+1)+': '+tempind1 + '  |   ' + str(xtemp) + '\t|  ' + str(myGA.MyFx(xtemp)))
            vfinal=vfinal+ "nextG"+str(ii+1)+": "+tempind1 + "  |   " + str(xtemp) + " &nbsp &nbsp|  " + str(myGA.MyFx(xtemp))+"^"

        vfinalparam=""
        #print(itermax) 
        for i in range(1,int(itermax)+1):
            # print (i)
            if i == int(itermax):
                vfinalparam=vfinalparam+str(i)
            else:
                vfinalparam=vfinalparam+str(i)+"^"
            
            
            


        # vfinal mengambil nilai individu terbaik
        # vfinal = float(v1) + float(v2) + float(v3)
        vfinal=vfinal+"^"+".^"+"Done..! :D^"+"=====================================================^"+"."

        ##TODOS[todo_id] = {'task': args['task'] + '=' + vfinalparam +"`"+vfinal}

        print("")       
        print(".")       
        print("Done..! :D")
        print("=============================================================")
        print(".")
        





        try:

            #car.save()

            response = json.dumps([{ 'Success': 'param_ga run successfully!'}])
        except:
            response = json.dumps([{ 'Error': 'param_ga could not be process!'}])

        # car = Car(name=car_name, top_speed=top_speed)
        #try:
        #    car.save()
        #    response = json.dumps([{ 'Success': 'Car added successfully!'}])
        #except:
        #    response = json.dumps([{ 'Error': 'Car could not be added!'}])
    return HttpResponse(response, content_type='text/json')